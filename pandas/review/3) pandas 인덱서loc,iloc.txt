#### 데이터 프레임 인덱서 : loc, iloc
- Pandas는 numpy행렬과 같이 쉼표를 사용한 (행 인덱스, 열 인덱스) 형식의 2차원 인덱싱을 지원
    - 특별한 인덱서(indexer) 속성을 제공
    
* loc : 라벨값 기반의 2차원 인덱싱
* iloc : 순서를 나타내는 정수 기반의 2차원 인덱싱


#### 행과 열을 동시에 인덱싱 하는 구조는 기본 자료구조 인덱스와 차이가 있음
- df['열']
- df[:'행'] 슬라이싱이 반드시 필요
- df['열'][:'행']

### loc 인덱서 : 행 우선 인덱서
- df.loc[행 인덱스 값] : 행 우선 인덱싱
- df.loc[행 인덱스 값, 열 인덱스 값]

    ##### 인덱스 값
    
    1. 인덱스 데이터(index name, column name)
    2. 인덱스 슬라이스
    3. 같은 행 인덱스를 갖는 불리언 시리즈(행 인덱싱인 경우)
        - 조건식을 인덱스로 사용 가능
    4. 1,2,3번 값을 반환하는 함수

#예제 df 생성
#10-21 범위의 숫자를 생성 후 3행 4열로 배치
df=pd.DataFrame(np.arange(10,22).reshape(3,4),
               index = ['a','b','c'],
               columns = ["A","B","C","D"])
df

	A	B	C	D
a	10	11	12	13
b	14	15	16	17
c	18	19	20	21

# loc 인덱서 사용

df.loc['a'] # a행 모든 열 반환 (시리즈 반환)
A    10
B    11
C    12
D    13
Name: a, dtype: int32

df.loc[['a']]	# a행 모든 열 반환 (데이터프레임 반환)
	A	B	C	D
a	10	11	12	13

##### 주의!!! 인덱서에서는 열 단독 인덱싱 불가능함
# df.loc['A'] # A열을 반환해 달라는 의미로 사용했는데 행위주 인덱싱이기 떄문에 에러

# 인덱스 값으로 슬라이싱
df.loc['b':'c']
	A	B	C	D
b	14	15	16	17
c	18	19	20	21

df["b":"c"]
	A	B	C	D
b	14	15	16	17
c	18	19	20	21


# loc로 데이터를 리스트로 여러행 출력
 - 데이터 프레임 형태로 반환
df.loc[[a']]
df.loc[['a','c']]
	A	B	C	D
a	10	11	12	13

	A	B	C	D
a	10	11	12	13
c	18	19	20	21

#### **boolean selection으로 row 선택하기**

df

	A	B	C	D
a	10	11	12	13
b	14	15	16	17
c	18	19	20	21

# 인덱서의 인덱스 값으로 조건식을 줄 수있음.
df.A >15
df.loc[df.A > 15]

a    False
b    False
c     True
Name: A, dtype: bool

	A	B	C	D
c	18	19	20	21

#예제 df 생성
df2 = pd.DataFrame(np.arange(10,26).reshape(4,4),
                  columns=['a','b','c','d'])
df2 #행 인덱스 지정하지 않아서 0부터 1씩 증가되는 정수 인덱스 자동 생성

	a	b	c	d
0	10	11	12	13
1	14	15	16	17
2	18	19	20	21
3	22	23	24	25

df2.loc[1:2] # 라벨 인덱스를 이용한 슬라이싱이기 때문에 초기값 : 끝 값 적용 - 1번인덱스부터 2번인덱스까지
	a	b	c	d
1	14	15	16	17
2	18	19	20	21

#### loc 인덱서 사용해서 요소 값 접근
- 인덱스 값으로 행과 열을 모두 받는 경우
- 문법 : df.loc[행 인덱스, 열 인덱스]
- 값(라벨) 인덱스 사용

df
	A	B	C	D
a	10	11	12	13
b	14	15	16	17
c	18	19	20	21

# df의 원소값 접근
# a행의 A열 원소를 출력
df.loc["a","A"]
df["A"]["a"]

10

# loc를 이용해서 a행 A열 원소값을 50으로 변경
df.loc['a','A'] = 50

#### loc를 이용한 indexing 정리

# a행의 모든 열
df.loc['a'] # 시리즈 반환
df.loc[['a']] # df 반환
df.loc['a',:] # 시리즈 반환

# a행의 B,C열
df.loc['a','B':'C'] # 시리즈 반환
df.loc[['a'],'B':'C']


### iloc 인덱서(위치 인덱스)
- 라벨(name)이 아닌 위치를 나타내는 정수 인덱스만 받는다.
- 위치 정수값은 0부터 시작
- 데이터프레임.iloc[행,열]

df
	A	B	C	D
a	50	11	12	13
b	14	15	16	17
c	18	19	20	21

# 원소값 접근
df.iloc[0,1] # 0행 1열 => 위치값은 0부터 시작
11

# 슬라이싱
df.iloc[0:2] # 0행부터 1행
	A	B	C	D
a	50	11	12	13
b	14	15	16	17
df.iloc[0:1] # 0행 데이터프레임
	A	B	C	D
a	50	11	12	13
df.iloc[0] # 0행 시리즈 
A    50
B    11
C    12
D    13
Name: a, dtype: int32

df.iloc[0:2,0] # 시리즈 반환
a    50
b    14
Name: A, dtype: int32
df.iloc[0:2,0:1] # df 반환
	A
a	50
b	14








