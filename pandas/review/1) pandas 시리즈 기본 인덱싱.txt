# 인덱스 명시 않고 , 데이터 생성
s0 = pd.Series(1)	# 0번 인덱스 자동 생성, value 값은 1
=> 0	1
s0[0]	
=> 1

# 2개 이상의 원소 값 갖는 시리즈 [리스트]
s1 = pd.Series([1,2,3])
=> 0	1
     1	2
     2	3


# 서로 다른 문자 형태도 가능, 시리즈 [리스트] object 객체
s1_2 = pd.Series(['a', 1, 5.0])
=> 0	a
     1	1
     2	5.0

# 2개 이상의 원소 값 갖는 시리즈 [튜플]
s1_3 = pd.Series((1,2,3))
=> 0	1
     1	2
     2	3

# 시리즈의 value를 범위로 생성하기 (range)
s = pd.Series(range(10,14)) 	# value는 10부터 13까지
=> 0	10
     1	11
     2	12
     3	13

# 시리즈의 value를 범위로 생성하기 (np.arange())
s = pd.Series(np.arange(10))	# value는 0부터 10까지
=> 0	0
     1	1
            ...
    10	10

# 결측 값을 포함해서 시리즈 만들기 (np.nan)
s = pd.Series([1,2,3,np.nan])	# 결측치 NaN은 float 으로 처리
0	1.0
1	2.0
2	3.0
3	NaN

# 인덱스 명시해서 시리즈 만들기 (수치 인덱스)
 - pd.Series([값1, 값2, ...], index=[인덱스1, 인덱스2, ...])
s = pd.Series([10,20,30], index = [1,2,3])
1	10
2	20
3	30

# 인덱스 명시해서 시리즈 만들기 (문자 인덱스)
s = pd.Series([10,20,30], index = ['홍길동','이몽룡',성춘향'])
홍길동	10
이몽룡	20
성춘향	30

# 인덱스 접근 ( 시리즈명.index)
s.index
-> index(['홍길동', '이몽룡', '성춘향'], dtype='object')

# 시리즈의 인덱스에 이름 붙이기
 - 시리즈.index.name = '붙일 이름'
s.index.name = '이름'
이름
홍길동	10
이몽룡	20
성춘향	30

# 시리즈 value 값 추출
- 시리즈명.values (array 구조로 반환)
s.values
-> array([10,20,30])


# 딕셔너리로 시리즈 만들기
- Series({key1:value1, key2:value2, ...})
- 인덱스 -> key, 값 -> vaule
scores = {'홍길동':96, '이몽룡':100, '성춘향':88}
s = pd.Series(scores)
홍길동	96
이몽룡	100
성춘향	88

# 원소접근
 - 위치 인덱스	# 인덱스 타입이 정수면 위치 인덱스 사용 불가
s[0]
96
 - 라벨 인덱스
s['이몽룡']
100

# 한줄에 위치 인덱스, 문자 인덱스를 동시에 접근
 - 튜플로 생성
s[1], s['성춘향']
(100, 88)

# 리스트 이용 인덱싱
- 자료의 순서를 바꾸거나, 특정 자료 여러개 선택할 때 사용
- ex) 시리즈명[[인덱스 1, 인덱스 2, ...]]

s[[2,1,0]]
성춘향	88
이몽룡	100
홍길동	96

s[['홍길동','성춘향']]
홍길동	96
성춘향	88

city = {'서울':9631482, '부산':3393191, '인천':2632035, '대전':1490158}
s=pd.Series(city)
s
서울	9631482
부산	3393191
인천	2632035
대전	1490158
dtype: int64

# 시리즈 슬라이싱을 이용한 인덱싱
# 위치 인덱스 슬라이싱
s[1:3] # 1번 인덱스 부터 2번 인덱스까지
부산	3393191
인천	2632035

# 문자 인덱스 슬라이싱
s['부산':'대전']
부산	3393191
인천	2632035
대전	1490158

### 슬라이싱 예제 - 명시적으로 설정한 정수 인덱스를 슬라이싱하면 위치 슬라이싱이 적용 - 주의
s_test = pd.Series([1,2,3,4], index=[1,3,5,7])
1	1
3	2
5	3
7	4

s_test[1:5]
3	2
5	3
7	4

# 문자 인덱스인 경우 . 이용
s.서울
9631482


# 인덱스를 통한 데이터 업데이트(update)
- 시리즈명[index] = data 값
s
서울    9631482
부산    3393191
인천    2632035
대전    1490158

s['서울'] = 10000000
서울	10000000
부산	3393191
인천	2632035
대전	1490158


# 인덱스 재 사용
s.index
Index(['서울', '부산', '인천', '대전'], dtype='object')
s1 = pd.Series(np.arange(4), s.index)
서울	0
부산	1
인천	2
대전	3

# 시리즈 연산
# 벡터화 연산
pd.Series([1,2,3]) + 4
0	5
1	6
2	7

s
서울    10000000
부산     3393191
인천     2632035
대전     1490158
s / 10
서울    1000000.0
부산     339319.1
인천     263203.5
대전     149015.8

# 벡터화 인덱싱 - 인덱싱에 조건식을 활용 할 수 있다
# 시리즈 s의 원소 값 중 2500000(250e4) 보다 크고 5000000(500e4) 보다 작은 원소를 추출
# 시리즈명[조건식] - 각 원소의 값 모두를 각각 조건식으로 확인해서 결과가 true인 원소만 추출
(s>250e4) & (s<500e4)
서울	False
부산	True
인천	True
대전	False



####  **Boolean selection**
    - boolean Series가 []와 함께 사용 되면 True 값에 해당하는 값만 새로 반환되는 Series 객체에 포함됨
    - 다중 조건의 경우, &(and), |(or)를 사용하여 연결 가능
s0 = pd.Series(np.arange(10), np.arange(10)+1)
s0
1     0
2     1
3     2
4     3
5     4
6     5
7     6
8     7
9     8
10    9

s0 > 5
1     False
2     False
3     False
4     False
5     False
6     False
7      True
8      True
9      True
10     True
dtype : bool

s0[s0>5]
7	6
8	7
9	8
10	9
dtype: int32

# s0 시리즈의 원소 값 중에 짝수 원소 값만 추출 하시오
s0[s0 % 2 == 0]
1	0
3	2
5	4
7	6
9	8

# s0의 인덱스 값을 추출해서 벡터화 연산 진행
s0.index > 5
array([False, False, False, False, False,  True,  True,  True,  True,
        True])

# sum() : 각 원소에 대해 조건식인 결과값이 True인 원소의 개수 계산
(s0 >= 7)
1     False
2     False
3     False
4     False
5     False
6     False
7     False
8      True
9      True
10     True

(s0 >= 7).sum()
3

# 두 시리즈 간의 연산

num_s1 = pd.Series([1,2,3,4], index = ['a','b','c','d'])
num_s2 = pd.Series([5,6,7,8], index = ['b','c','d','a'])

a    1
b    2
c    3
d    4
dtype: int64

b    5
c    6
d    7
a    8
dtype: int64

# 시리즈 간의 덧셈
num_s1 + num_s2		# 시리즈 간의 연산은 같은 인덱스를 찾아 진행
a	9
b	7
c	9
d	11

num_s3 = pd.Series([1,2,3,4], index = ['e','b','f','g'])
num_s4 = pd.Series([5,6,7,8], index = ['b','c','d','a'])
e    1
b    2
f    3
g    4
dtype: int64
b    5
c    6
d    7
a    8
dtype: int64

num_s3 + num_s4 # 인덱스가 동일한 것만 연산하고 동일하지 않은 것은 NaN처리
a	NaN
b	7.0
c	NaN
d	NaN
e	NaN
f	NaN
g	NaN

# .values 속성 minus(-)연산
 - values 속성을 사용하면 시리즈의 형태가 사라지므로 동일한 위치 원소들끼리 연산
 - 시리즈의 values는 array 형태를 반환 
num_s4.values - num_s3.values
array([4,4,4,4], dtype = int64)

# 딕셔너리와 시리즈의 관계
- 시리즈 객체는 라벨(문자)에 의해 인덱싱이 가능
- 실질적으로는 라벨을 key로 가지는 딕셔너리 형과 같다고 볼 수 있다.
- 딕셔너리에서 제공하는 대부분의 연산자 사용 가능
    - in 연산자 : T/F
    - for 루프를 통해 각 원소의 key와 value에 접근 할 수 있다.

s
서울    10000000
부산     3393191
인천     2632035
대전     1490158

# 시리즈 s에 인덱스가 서울인 원소가 시리즈에 있는지 확인
'서울' in s
True

# 딕셔너리의 items() 함수 시리즈에서도 사용 가능
list(s.items())
[('서울', 10000000), ('부산', 3393191), ('인천', 2632035), ('대전', 1490158)]

# 반복문을 활용해서 시리즈의 각 원소 출력 코드
for k,v in s.items():
	print(f"{k}={v}")
서울=10000000
부산=3393191
인천=2632035
대전=1490158


# 시리즈의 데이터 갱신/추가/삭제

# s 시리즈의 부산의 인구 값을 8630000로 갱신
s['부산'] = 8630000
s
서울    10000000
부산     3393191
인천     2632035
대전     1490158

# 시리즈에 새로운 데이터 추가
- 시리즈명[index] = value
s['대구'] = 1875000
s
서울    10000000
부산     8630000
인천     2632035
대전     1490158
대구     1875000

# 시리즈의 데이터 삭제
 - del 시리즈명[인덱스]
del s['대전']
서울    10000000
부산     8630000
인천     2632035
대구     1875000

#### Series size, shape, unique, count, value_counts 함수

- size 속성 : 개수 반환
- shape 속성 : 튜플 형태로 shape 반환
- unique : 유일한 값만 ndarray로 반환
- count : NaN을 제외한 개수를 반환
- mean : NaN을 제외한 평균
- value_counts : NaN을 제외하고 각 값들의 빈도를 반환

s1 = pd.Series([1,1,2,1,2,2,2,1,1,3,3,4,5,5,7,np.NaN])
s1
0     1.0
1     1.0
2     2.0
3     1.0
4     2.0
5     2.0
6     2.0
7     1.0
8     1.0
9     3.0
10    3.0
11    4.0
12    5.0
13    5.0
14    7.0
15    NaN

# len(시리즈명)
len(s1) # NaN 값 포함
16

# 시리즈명.size
s1.size	# NaN값 포함한 개수
16

# 시리즈명.shape
s1.shape # 차원을 표시하기 때문에 튜플 형태로 출력
(16,)

# 시리즈명.unique()
s1.unique() # 중복값을 제거한 원소 값 출력
array([ 1.,  2.,  3.,  4.,  5.,  7., nan])

# 시리즈명.count()
s1.count() # NaN 값을 제거한 원소의 개수
15

# 시리즈명.mean()
a = np.array([1,2,3,4,5,np.NaN]) # 결측치 포함
b = pd.Series(a)
a
b
a.mean() # np의 array를 평균 계산 - NaN이 포함되면 계산불가(NaN 반환)
b.mean() # 기본 nan 값을 제외시키고 평균 계산

array([ 1.,  2.,  3.,  4.,  5., nan])

0    1.0
1    2.0
2    3.0
3    4.0
4    5.0
5    NaN
dtype: float64

nan
3.0

# 시리즈명.values_counts()
- 각 원소들은 같은 값끼리 그룹을 만들고 개수를 세서 반환
s1
s1.value_counts()
0     1.0
1     1.0
2     2.0
3     1.0
4     2.0
5     2.0
6     2.0
7     1.0
8     1.0
9     3.0
10    3.0
11    4.0
12    5.0
13    5.0
14    7.0
15    NaN
dtype: float64
1.0    5
2.0    4
3.0    2
5.0    2
7.0    1
4.0    1
dtype: int64































































