#!/usr/bin/env python
# coding: utf-8

# In[2]:


#필요한 패키지(판다스, 넘피를 import 하고 pd,np로 별명을 만드시오
import pandas as pd
import numpy as np


# #### 시리즈  문제 

# In[4]:


# 연습문제 1
# 임의로 두개의 시리즈 객체를 만든다.
# 모두 문자열 인덱스를가져야 하며 두 시리즈에 공통적으로 포함
# 되지 않는 인덱스(라벨)가 있어야 한다.
# 값과 시리즈 원소 개수도 임의 설정할 것
s = pd.Series([1,2,3], index = ['a','b','c'])
s1 = pd.Series({'b':5,'c':7,'d':8},index=['b','d','c'])
print(s)
s1


# In[5]:


#연습문제 2 : 아래 시리즈 객체를 이용하여 사칙연산을 
#수행하고 결과를 출력하시오.
ex_s1 = pd.Series({'국어':95,'영어':80,'수학':75})
ex_s2 = pd.Series({'국어':95,'영어':80,'수학':75})


# In[6]:


ex_s1 - ex_s2


# In[7]:


ex_s1 + ex_s2


# In[8]:


ex_s1 * ex_s2


# In[9]:


ex_s1 / ex_s2


# In[10]:


#연습문제 3 : 아래 두 객체에 대하여 아래 제시된 연산을 수행하시오.
ex_s1 = pd.Series({'국어':95,'영어':80,'수학':75})
ex_s2 = pd.Series({'국어':95,'과학':80,'논술':75})


# In[11]:


# - 연산을 수행하고 결과를 설명하시오
ex_s1 - ex_s2
#  두 시리즈에서 동일한 인덱스는 연산을 수행하고 인덱스가 동일하지 않은 원소는 
# 연산 수행불가로  결측치가 표시됨


# In[12]:


ex_s1.values - ex_s2.values
# 위 연산을 수행했을 때 출력되는 결과를 설명하시오
#  values 속성으로 접근하면 시리즈가 아닌 np.array 이므로 위치 인덱스만 갖게되고 동일한 위치 인덱스 원소
#  끼리 계산이 수행 됨


# In[13]:


# 연습문제 4
# 아래 데이터를 이용해서 시리즈 s를 생성하시오
    # 서울 : 9904312, 부산 : 3448737, 인천 : 2890451  대구 : 2466052  
s= pd.Series([9904312,3448737,289045,2466052],
            index=["서울","부산","인천","대구"])
s    


# In[17]:


# 연습문제 5 :
#시리즈 s 변수의 인덱스를 출력해서 확인하고
#세번째 인덱스의 값을 라벨인덱스로 접근 후 출력하시오.
print(s.index)
print(s['인천'])
s[2]


# In[18]:


# 연습문제 6
#시리즈 s에 대하여 라벨(문자)인덱싱을 이용하고
#부산, 인천, 대구의 값을 추출하시오.

s[['부산','인천','대구']]


# In[19]:


# 연습문제 7
#아래 데이터를 이용하여 시리즈를 생성하고 데이터 순서를 서울, 부산, 인천, 대전 으로 설정하시오 - 딕셔너리 활용
#   서울 9631482
#   부산 3393191
#   인천 2632035
#   대전 1490158

city = {'서울':9631482,'부산':3393191,'인천':2632035,'대전':1490158}
s=pd.Series(city, index=['서울','부산','인천','대전'])
s


# In[21]:


# 연습문제 8
# 위에서 생성한 시리즈에 인구 라는 이름을 설정하시오

s.name = '인구'
s

#시리즈 인덱스에 이름 설정
s.index.name = '도시'
s


# In[23]:


# 연습문제 9
# 위에서 생성한 시리즈의 인구수가 3,000,000 이상인 도시를 출력하시오
s > 3000000
s[s > 3000000]


# In[24]:


# 연습문제 10
# 위에서 생성한 시리즈의 서울 데이터를 11,000,000 으로 변경하세요

s['서울'] = 11000000
s


# In[25]:


# 연습문제 11
# 대전 데이터를 삭제하세요

del s['대전']
s


# In[27]:


# 연습문제 12 
# 대구 데이터가 있는지 확인 하세요

'대구' in s

if '대구' in s :
    print('데이터에 대구 정보가 있습니다')
else : 
    print('데이터에 대구 정보는 없습니다')


# In[28]:


# 연습문제 13
# 대구에 대한 데이터를 시리즈 s에 추가하시오 (대구 인구수 : 1600000)

s['대구'] = 1600000
s


# In[ ]:





# In[ ]:




